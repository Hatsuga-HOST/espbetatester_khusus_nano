local __B=[[]]
local function __b64d(s)
  local t='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
  local d={} for i=1,#t do d[string.byte(t,i)]=i-1 end
  local out={} local n=1 local val=0 local valb=-8
  for i=1,#s do local c=d[string.byte(s,i)]; if c then val=val*64+c; valb=valb+6; if valb>=0 then out[n]=string.char(math.floor(val/(2^valb))%256); n=n+1; val=val%(2^valb); valb=valb-8 end end end
  return table.concat(out)
end
local function __xor(s,k)
  if not k or #k==0 then return s end
  local out={} local n=1
  local hasBit = (bit32 and bit32.bxor) or (_G._bxor)
  for i=1,#s do
    local a=string.byte(s,i)
    local b=string.byte(k, ((i-1)%#k)+1 )
    local x
    if bit32 and bit32.bxor then x=bit32.bxor(a,b)
    elseif _G._bxor then x=_G._bxor(a,b)
    elseif _VERSION=='Lua 5.3' or _VERSION=='Lua 5.4' then x=a ~ b
    else x=(a+b-2*((a&b)+( (a~b)&((a~b)-1) )/2))%256 end
    out[n]=string.char(x); n=n+1
  end
  return table.concat(out)
end
local __K=io and io.read and io.read() or (function()
  if typeof~=nil and typeof==type then return '' end
  return '' end)()
local __P=__xor(__b64d(__B), __K)
local __f, __e = (load or loadstring)(__P, nil, 't', _ENV or getfenv())
if not __f then error(__e) end
return __f()
